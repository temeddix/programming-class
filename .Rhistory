}
cal1(3,5)
cal2<-function(a,b,type){
if (type=='add') rst<-a+b
if (type=='minus') rst<-a-b
if (type=='multiply') rst<-a*b
if (type=='divide') rst<-a/b
return(rst) # Or, `return` can go directly inside `if`
}
cal2(3,5,'divide')
sum_two<-function(a=1,b){
rst1<-a+b
rst2<-a-b
return(list(out1=rst1, out2=rst2))
}
#sum_two( b=5)
sum_two(a=10,b=5) # a=1이라는 default의 값이 input 숫자 10으로 변경됨
#sum_two(b=5, a=10) #변수의 순서를 바꾸어도 상관없음
#c$out1
#c$out2
filter_even<-function(a){
return(a[a%%2==0])
}
input<-c(1,74,4,1,8,45,2341,33,4,6)
filter_even(input)
input<-c(1,74,4,1,8,45,2341,33,4,6)
calc<-function(a){
return(list(
mean=mean(a),
var=var(a),
std=sd(a),
stderr=sd(a)/sqrt(length(a))
))
}
calc(input)
rev("hello")
rev(c(1,2,3,4))
strsplit("hello","")
strsplit("hello","")[[1]]
rev_str<-function(org_str){ # IMPORTANT
new_str<-paste0(rev(strsplit(org_str,"")[[1]]),collapse="")
return(new_str)
}
rev_str('hello')
# Reading and writing files are not included in the exam.
# Drawing plots are also not included.
#install.packages("ggplot2")
library(ggplot2)
RN<-rnorm(100,3,2)
d_RN<-data.frame(RN)
ggplot(d_RN,aes(x=RN))+ geom_histogram() #histogram
ggplot(d_RN,aes(y=RN))+ geom_boxplot() #boxplot
RN_x<-RN
RN_y<-rnorm(100,5,3)
m_RN<-data.frame(RN_x,RN_y)
ggplot(m_RN, aes(x=RN_x, y=RN_y)) + geom_point() #scatter plot
# Reading and writing files are not included in the exam.
# Drawing plots are also not included.
x<-runif(100000)
sum(x)
mean(x)
knitr::opts_chunk$set(echo = TRUE)
Sys.setlocale('LC_ALL',"C")
sum_two<-function(a,b){
rst<-a+b
return(rst)
}
#sum_two(a=3, b=5)
#sum_two(5,3)
c<-sum_two(a=3,b=5)
c
sum_two<-function(a,b){
rst1<-a+b
rst2<-a-b
return(list(rst1, rst2))
}
#sum_two(a=3, b=5)
c<-sum_two(a=3,b=5)
c
c[[2]]
unlist(sum_two(a=3,b=5))
l1<-list(g1="ABC",g2=1:5,g3=rep("*",3))
l1
my_vec<-unlist(l1) # list to vector. string takes precedence over integer
my_vec
my_list<-list(my_vec)
my_list
cal1<-function(a,b){
return(list(a=a+b,b=a-b,c=a*b,d=a/b))
}
cal1(3,5)
cal2<-function(a,b,type){
if (type=='add') rst<-a+b
if (type=='minus') rst<-a-b
if (type=='multiply') rst<-a*b
if (type=='divide') rst<-a/b
return(rst) # Or, `return` can go directly inside `if`
}
cal2(3,5,'divide')
sum_two<-function(a=1,b){
rst1<-a+b
rst2<-a-b
return(list(out1=rst1, out2=rst2))
}
#sum_two( b=5)
sum_two(a=10,b=5) # a=1이라는 default의 값이 input 숫자 10으로 변경됨
#sum_two(b=5, a=10) #변수의 순서를 바꾸어도 상관없음
#c$out1
#c$out2
filter_even<-function(a){
return(a[a%%2==0])
}
input<-c(1,74,4,1,8,45,2341,33,4,6)
filter_even(input)
input<-c(1,74,4,1,8,45,2341,33,4,6)
calc<-function(a){
return(list(
mean=mean(a),
var=var(a),
std=sd(a),
stderr=sd(a)/sqrt(length(a))
))
}
calc(input)
rev("hello")
rev(c(1,2,3,4))
strsplit("hello","")
strsplit("hello","")[[1]]
rev_str<-function(org_str){ # IMPORTANT
new_str<-paste0(rev(strsplit(org_str,"")[[1]]),collapse="")
return(new_str)
}
rev_str('hello')
# Reading and writing files are not included in the exam.
# Drawing plots are also not included.
# Section 8.2 is not going to be in the exam.
x<-runif(100000)
sum(x)
mean(x)
#install.packages("ggplot2")
library(ggplot2)
RN<-rnorm(100,3,2)
d_RN<-data.frame(RN)
ggplot(d_RN,aes(x=RN))+ geom_histogram() #histogram
ggplot(d_RN,aes(y=RN))+ geom_boxplot() #boxplot
RN_x<-RN
RN_y<-rnorm(100,5,3) # Mean 5, std 3
m_RN<-data.frame(RN_x,RN_y)
ggplot(m_RN, aes(x=RN_x, y=RN_y)) + geom_point() #scatter plot
pnorm(1.65)
1-pnorm(1.65)
pnorm(1.65, lower.tail=FALSE)
pnorm(1.96)-pnorm(-1.96)
qnorm(0.95)
ls<-seq(-4,4,length=2000)
zd<-dnorm(ls)
td1<-dt(ls,df=4)
td2<-dt(ls,df=30)
m_zd<-data.frame(ls,zd,td1,td2)
gg<-ggplot(m_zd, aes(x=ls, y=zd))  + geom_line()
gg+geom_line(aes(ls,td1), color="red",linetype = 6) +geom_line(aes(ls,td2), color="green",linetype=3)
knitr::opts_chunk$set(echo = TRUE)
Sys.setlocale('LC_ALL','C')
exam<-read.csv("csv_exam.csv",header=FALSE,col.names=c("id","class","math","english","science"))
exam$class<-as.factor(exam$class)
str(exam)
head(exam)
knitr::opts_chunk$set(echo = TRUE)
Sys.setlocale('LC_ALL','C')
exam<-read.csv("csv_exam.csv",header=FALSE,col.names=c("id","class","math","english","science"))
exam$class<-as.factor(exam$class)
str(exam)
head(exam)
knitr::opts_chunk$set(echo = TRUE)
Sys.setlocale('LC_ALL','C')
exam<-read.csv("csv_exam.csv",header=FALSE,col.names=c("id","class","math","english","science"))
exam$class<-as.factor(exam$class)
str(exam)
head(exam)
knitr::opts_chunk$set(echo = TRUE)
Sys.setlocale('LC_ALL','C')
exam<-read.csv("csv_exam.csv",header=FALSE,col.names=c("id","class","math","english","science"))
exam$class<-as.factor(exam$class)
str(exam)
head(exam)
exam1<-exam %>% filter(class %in% c("1","3","5") & math >=50)
knitr::opts_chunk$set(echo = TRUE)
Sys.setlocale('LC_ALL','C')
exam<-read.csv("csv_exam.csv",header=FALSE,col.names=c("id","class","math","english","science"))
exam$class<-as.factor(exam$class)
str(exam)
head(exam)
library(dplyr)
exam %>% filter(class=='1')
#subset(exam, class=="1")
exam %>% filter(class!='3')
subset(exam, class!="3")
exam1<-exam %>% filter(english <90 | science<50)
exam1
subset(exam, english <90 | science<50)
# IMPORTANT. Using `dpylr` and not using it will be on the exam.
exam1<-exam %>% filter(class %in% c("1","3","5") & math >=50)
# exam1<-subset(exam,class %in% c("1","3","5") & math >=50)
apply(exam1[,c(4,5)],2,mean)
apply(exam1[,c(4,5)],2,sd)
#Q2.
m1<-mean(mpg_data$city[mpg_data$class=="compact"])
#Q1.
mpg_data=data.frame(mpg$class, mpg$cty)
#Q2.
m1<-mean(mpg_data$cty[mpg_data$class=="compact"])
mp2<mean(mpg_data$cty[mpg_data$class=="suv"])
#Q2.
m1<-mean(mpg_data$cty[mpg_data$class=="compact"])
m2<mean(mpg_data$cty[mpg_data$class=="suv"])
m1
m2
knitr::opts_chunk$set(echo = TRUE)
Sys.setlocale('LC_ALL','C')
exam<-read.csv("csv_exam.csv",header=FALSE,col.names=c("id","class","math","english","science"))
exam$class<-as.factor(exam$class)
str(exam)
head(exam)
library(dplyr)
exam %>% filter(class=='1')
#subset(exam, class=="1")
exam %>% filter(class!='3')
subset(exam, class!="3")
exam1<-exam %>% filter(english <90 | science<50)
exam1
subset(exam, english <90 | science<50)
# IMPORTANT. Using `dpylr` and not using it will be on the exam.
exam1<-exam %>% filter(class %in% c("1","3","5") & math >=50)
# exam1<-subset(exam,class %in% c("1","3","5") & math >=50)
apply(exam1[,c(4,5)],2,mean)  # '2' means fixing the column and calcualting along the rows
apply(exam1[,c(4,5)],2,sd)
# IMPORTANT: The relationship between `filter` and `subset`
exam %>% select(math)
#subset(exam, select=math)
exam %>% select(english,science)
#subset(exam, select=c(english,science))
# IMPORTANT: `select` doesn't require c(), but `subset` does.
exam %>% select(-math, -english)
#subset(exam, select=-c(math,english))
exam %>%
filter(class %in% c("1","2")) %>%
select(id, math)
#subset(exam, class %in% c("1","2"), select=c(id, math))
#순차적으로 실행되므로, select에서 class가 선택되지 않아 filter에서 class를 사용하면 error 발생
#exam %>%
#  select(id,math)  %>%
#  filter(class %in% c("1","2"))
exam %>%
select(id,class,math)  %>%
filter(class %in% c("1","2")) %>%
select(-class)
exam %>%
filter((math+english+science)/3>=65) %>%
tail
# `tibble` is something more better than `data.frame`.
#Q1.
mpg_data=data.frame(mpg$class, mpg$cty)
#Q2.
m1<-mean(mpg_data$cty[mpg_data$class=="compact"])
m2<mean(mpg_data$cty[mpg_data$class=="suv"])
m1
m2
#Q1.
mpg_data=data.frame(mpg$class, mpg$cty)
mpg_data=mpg[['class','cty']]
#Q1.
mpg_data=data.frame(mpg$class, mpg$cty)
#Q2.
m1<-mean(mpg_data$cty[mpg_data$class=="compact"])
m2<-mean(mpg_data$cty[mpg_data$class=="suv"])
m1
m2
#Q3.
#tapply(mpg_data$cty, list(mpg_data$class), mean)
#aggregate(mpg_data$cty, list(mpg_data$class), mean)
aggregate(cty~class, data=mpg_data[mpg_data$class=="compact",], mean)
#Q3.
#tapply(mpg_data$cty, list(mpg_data$class), mean)
#aggregate(mpg_data$cty, list(mpg_data$class), mean)
aggregate(cty~class, data=mpg_data[mpg_data$class %in% c("compact","suv"),], mean)
#Q3.
#tapply(mpg_data$cty, list(mpg_data$class), mean)
#aggregate(mpg_data$cty, list(mpg_data$class), mean)
aggregate(cty~class, data=mpg_data[mpg_data$class %in% c("compact","suv"),], mean)
#Q3.
#subset(mpg, (class=="compact"&cty>m1) | (class=="suv" & cty>m2), select=c(manufacturer, class))
mpg_cty<-mpg %>%
filter((class=="compact" & cty>m1)
| (class=="suv" & cty>m2)) %>%
select(manufacturer, class)
dicstinct(mpg_cty, .keep_all=TRUE)
#Q3.
#subset(mpg, (class=="compact"&cty>m1) | (class=="suv" & cty>m2), select=c(manufacturer, class))
mpg_cty<-mpg %>%
filter((class=="compact" & cty>m1)
| (class=="suv" & cty>m2)) %>%
select(manufacturer, class)
distinct(mpg_cty, .keep_all=TRUE)
# mpg_cty[!duplicated(mpg_cty),]
# unique(mpg_cty)
knitr::opts_chunk$set(echo = TRUE)
Sys.setlocale('LC_ALL','C')
exam<-read.csv("csv_exam.csv",header=FALSE,col.names=c("id","class","math","english","science"))
exam$class<-as.factor(exam$class)
str(exam)
head(exam)
library(dplyr)
exam %>% filter(class=='1')
#subset(exam, class=="1")
exam %>% filter(class!='3')
subset(exam, class!="3")
exam1<-exam %>% filter(english <90 | science<50)
exam1
subset(exam, english <90 | science<50)
# IMPORTANT. Using `dpylr` and not using it will be on the exam.
exam1<-exam %>% filter(class %in% c("1","3","5") & math >=50)
# exam1<-subset(exam,class %in% c("1","3","5") & math >=50)
apply(exam1[,c(4,5)],2,mean)  # '2' means fixing the column and calcualting along the rows
apply(exam1[,c(4,5)],2,sd)
# IMPORTANT: The relationship between `filter` and `subset`
exam %>% select(math)
#subset(exam, select=math)
exam %>% select(english,science)
#subset(exam, select=c(english,science))
# IMPORTANT: `select` doesn't require c(), but `subset` does.
exam %>% select(-math, -english)
#subset(exam, select=-c(math,english))
exam %>%
filter(class %in% c("1","2")) %>%
select(id, math)
#subset(exam, class %in% c("1","2"), select=c(id, math))
#순차적으로 실행되므로, select에서 class가 선택되지 않아 filter에서 class를 사용하면 error 발생
#exam %>%
#  select(id,math)  %>%
#  filter(class %in% c("1","2"))
exam %>%
select(id,class,math)  %>%
filter(class %in% c("1","2")) %>%
select(-class)
exam %>%
filter((math+english+science)/3>=65) %>%
tail
# `tibble` is something more better than `data.frame`.
#Q1.
mpg_data=data.frame(mpg$class, mpg$cty)
#Q2.
m1<-mean(mpg_data$cty[mpg_data$class=="compact"])
m2<-mean(mpg_data$cty[mpg_data$class=="suv"])
m1
m2
# tapply(mpg_data$cty, list(mpg_data$class), mean)
# aggregate(mpg_data$cty, list(mpg_data$class), mean)
aggregate(cty~class, data=mpg_data[mpg_data$class %in% c("compact","suv"),], mean)
#Q3.
#subset(mpg, (class=="compact"&cty>m1) | (class=="suv" & cty>m2), select=c(manufacturer, class))
mpg_cty<-mpg %>%
filter((class=="compact" & cty>m1)
| (class=="suv" & cty>m2)) %>%
select(manufacturer, class)
distinct(mpg_cty, .keep_all=TRUE)
# mpg_cty[!duplicated(mpg_cty),]
# unique(mpg_cty)
knitr::opts_chunk$set(echo = TRUE)
#Sys.setlocale('LC_ALL','C')
n<-as.integer(readline("Enter a number: "))
divisors<-c()
for (i in 1:n) {
if (n%%i==0) divisors<-c(divisors, i)
}
divisors
n<-as.integer(readline("수를 입력하세요: "))
i<-2
is_prime<-TRUE
while (i<n) {
if (n%%i==0) {
is_prime<-FALSE
break
}
}
if (is_prime) print("소수입니다.") else print("소수가 아닙니다.")
n<-as.integer(readline("수를 입력하세요: "))
i<-2
is_prime<-TRUE
while (i<n) {
if (n%%i==0) {
is_prime<-FALSE
break
}
}
n<-as.integer(readline("수를 입력하세요: "))
i<-2
is_prime<-TRUE
while (i<n) {
if (n%%i==0) {
is_prime<-FALSE
break
}
}
n<-as.integer(readline("수를 입력하세요: "))
i<-2
is_prime<-TRUE
while (i<n) {
if (n%%i==0) {
is_prime<-FALSE
break
}
i<-i+1
}
if (is_prime) print("소수입니다.") else print("소수가 아닙니다.")
n<-as.integer(readline("수를 입력하세요: "))
i<-2
is_prime<-TRUE
while (i<n) {
if (n%%i==0) {
is_prime<-FALSE
break
}
i<-i+1
}
if (is_prime) print("소수입니다.") else print("소수가 아닙니다.")
n<-as.integer(readline("수를 입력하세요: "))
i<-2
is_prime<-TRUE
while (i<n) {
if (n%%i==0) {
is_prime<-FALSE
break
}
i<-i+1
}
if (is_prime) print("소수입니다.") else print("소수가 아닙니다.")
n<-as.integer(readline("수를 입력하세요: "))
i<-2
is_prime<-TRUE
while (i<n) {
if (n%%i==0) {
is_prime<-FALSE
break
}
i<-i+1
}
if (is_prime) print("소수입니다.") else print("소수가 아닙니다.")
find_min<-function(a){
found<-a[0]
for (i in a){
if (i<found) found<-i
}
return(found)
}
v = c(17, 92, 18, 33, 58, 7, 33, 42)
find_min(v)
find_min<-function(a){
found<-a[1]
for (i in a){
if (i<found) found<-i
}
return(found)
}
v = c(17, 92, 18, 33, 58, 7, 33, 42)
find_min(v)
m<-"green-red-black-white"
splitted<-strsplit(m, "-")
splitted<-sort(splitted)
m<-"green-red-black-white"
splitted<-strsplit(m, "-")
splitted<-sort(splitted)
m<-"green-red-black-white"
splitted<-strsplit(m, "-")
splitted<-sort(splitted)
m<-"green-red-black-white"
splitted<-strsplit(m, "-")[[1]]
splitted<-sort(splitted)
final<-paste(splitted, collapse="-")
final
knitr::opts_chunk$set(echo = TRUE)
#Sys.setlocale('LC_ALL','C')
n<-as.integer(readline("수를 입력하세요: "))
divisors<-c()
for (i in 1:n) {
if (n%%i==0) divisors<-c(divisors, i)
}
divisors
n<-as.integer(readline("수를 입력하세요: "))
i<-2
is_prime<-TRUE
while (i<n) {
if (n%%i==0) {
is_prime<-FALSE
break
}
i<-i+1
}
if (is_prime) print("소수입니다.") else print("소수가 아닙니다.")
find_min<-function(a){
found<-a[1]
for (i in a){
if (i<found) found<-i
}
return(found)
}
v = c(17, 92, 18, 33, 58, 7, 33, 42)
find_min(v)
m<-"green-red-black-white"
splitted<-strsplit(m, "-")[[1]]
splitted<-sort(splitted)
final<-paste(splitted, collapse="-")
final
