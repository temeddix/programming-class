} else if (card)   {
print("택시를 탄다.")
message<-"success2"
} else
{ print("걸어간다.") ; message<-"failure" }
message
input<-as.numeric(readline(prompt='Enter a number: '))
if (input<0) {output<-input*-1}
#output<-ifelse(input<0, input*-1, input)
#output<- if (input<0) input*-1 else input
sprintf('The output is %.2f', output)
treeHit<-0
while (treeHit<10)
{
treeHit<-treeHit+1
if(treeHit==10) print("나무가 넘어간다.")
}
treeHit
treeHit<-0
while (treeHit<10)
{
treeHit<-treeHit+1
#1
print(paste0("나무를 ",treeHit,"번 찍었다."))
#2
#print(sprintf("나무를 %d 번 찍었다.", treeHit))
#3
#cat("나무를",treeHit,"번 찍었다.","\n")
if (treeHit==10 ) print("나무가 넘어간다.")
}
# paste0 assumes that each items is a vector, and zips it
print(paste0("A","B","C")) #You don't need to do collapse if each is singular
print(paste0(letters[1:5],LETTERS[1:5]))
print(paste0(letters[1:5],LETTERS[1:5], collapse=" "))
print(paste0(letters[1:5],LETTERS[1:5], collapse=", "))
a<-0
while (a<10)
{
a<-a+1
if (a%%2 == 1 ) print(a)  # a%%b는 a를 b로 나누었을 때 나머지, a%/%b 는 몫
}
a<-1
while (a<11)
{
if (a%%2 == 1 ) print(a)  # a%%b는 a를 b로 나누었을 때 나머지, a%/%b 는 몫
a<-a+1
}
a<-0
while (a<10)
{
a<-a+1
if (a%%2 == 0 ) {}
else print(a)
}
a<-0
while (a<10)
{
a<-a+1
if (a%%2 == 0 )   next  # continue의 의미
print(a)
}
coffee <-10
money <- 300
while (money)
{
print("돈을 받았으니 커피를 줍니다.")
coffee <- coffee -1
print(paste0("남은 커피의 양은 ", coffee,"개입니다." ))
if (coffee==0)  {
print("커피가 다 떨어졌습니다. 판매를 중지합니다.")
break
}
}
sum<-0
current<-1
while (current<=1000) {
if (current%%3==0) {
sum+=current
sum<-0
current<-1
while (current<=1000) {
if (current%%3==0) {
sum<-sum+current
}
}
sum<-0
current<-1
while (current<=10) {
if (current%%3==0) {
sum<-sum+current
}
current<-current+1
}
sum
sum<-0
current<-1
while (current<=1000) {
if (current%%3==0) {
sum<-sum+current
}
current<-current+1
}
sum
count<as.integer(readline("How many lines do you want?: "))
count<-as.integer(readline("How many lines do you want?: "))
text<-""
current<-1
while (current<=count) {
text<=text+"\nhi"
count<-count+1
}
count<-as.integer(readline("How many lines do you want?: "))
text<-""
current<-1
while (current<=count) {
text<=text+"\n"
count<-count+1
}
count<-as.integer(readline("How many lines do you want?: "))
text<-""
current<-1
while (current<=count) {
cat(rep("*", current))
count<-count+1
}
count<-as.integer(readline("How many lines do you want?: "))
text<-""
current<-1
while (current<=count) {
cat(rep("*", current))
current<-current+1
}
count<-as.integer(readline("How many lines do you want?: "))
text<-""
current<-1
while (current<=count) {
cat(rep("*", current))
current<-current+1
}
count<-as.integer(readline("How many lines do you want?: "))
text<-""
current<-1
while (current<=count) {
cat("\n",rep("*", current))
current<-current+1
}
count<-as.integer(readline("How many lines do you want?: "))
text<-""
current<-1
while (current<=count) {
cat("\n",rep("*", current))
current<-current+1
}
a<seq(1,1000)
sum(a[a%%3==0])
###
sum<-0
current<-1
while (current<=1000) {
if (current%%3==0) {
sum<-sum+current
}
current<-current+1
}
sum
a<-seq(1,1000)
sum(a[a%%3==0])
###
sum<-0
current<-1
while (current<=1000) {
if (current%%3==0) {
sum<-sum+current
}
current<-current+1
}
sum
### With indexing
a<-seq(1,1000)
sum(a[a%%3==0])
### Using `while
sum<-0
current<-1
while (current<=1000) {
if (current%%3==0) {
sum<-sum+current
}
current<-current+1
}
sum
### With indexing
a<-seq(1,1000)
sum(a[a%%3==0])
### Using `while
total<-0
current<-1
while (current<=1000) {
if (current%%3==0) {
total<-total+current
}
current<-current+1
}
sum
marks<-c(90,25,67,45,80)
id<-0
for (i in marks)
{
id<-id+1
if(i<60) {next}
#1
print(paste0(id, "번 학생 축하합니다. 합격입니다."))
#2
#print(sprintf("%d번 학생 축하합니다. 합격입니다.", id))
#3
#cat(id,"번 학생 축하합니다. 합격입니다.","\n")
}
### Using `for`
total<-0
numbers <- seq(1,1000)
for (current in numbers) {
if (current%%3==0) {
total<-total+current
}
current<-current+1
}
total
scores<-c(70,60,55,75,95,90,80,80,85,100)
n<-len(scores)
scores<-c(70,60,55,75,95,90,80,80,85,100)
n<-length(scores)
total<-0
for (score in scores){
total<-total+score
}
score_mean<-total/n
score_mean
var_total<-0
for (score in scores){
var_total<-var_total+(score-score_mean)^2
}
variation<-var_total/(n-1)
std_variation<-variation^0.5
std_variation
sd(scores)
### Using `for`
total<-0
for (current in 1:1000) {
if (current%%3==0) {
total<-total+current
}
current<-current+1
}
total
scores<-c(70,60,55,75,95,90,80,80,85,100)
n<-length(scores)
total<-0
for (score in scores){
total<-total+score
}
score_mean<-total/n
score_mean
var_total<-0
for (score in scores){
var_total<-var_total+(score-score_mean)^2
}
variation<-var_total/(n-1)
std_variation<-variation^0.5
std_variation
sd(scores)
### Using `for`
total<-0
group<-c()
for (current in 1:1000) {
if (current%%3==0) {
total<-total+current
append(group, current)
}
current<-current+1
}
total
group
### Using `for`
total<-0
group<-c()
for (current in 1:1000) {
if (current%%3==0) {
total<-total+current
group<-c(group, current)
}
current<-current+1
}
total
group
scores<-c(20,55,67,82,45,33,90,87,100,25)
total<-0
for (i in 1:length(scores)) {
scores<-scores+i
}
total
###
scores<-c(20,55,67,82,45,33,90,87,100,25)
sum(scores[score<=50])
scores<-c(20,55,67,82,45,33,90,87,100,25)
total<-0
for (i in 1:length(scores)) {
total<-total+i
}
total
###
scores<-c(20,55,67,82,45,33,90,87,100,25)
sum(scores[score>=50])
scores<-c(20,55,67,82,45,33,90,87,100,25)
total<-0
for (i in 1:length(scores)) {
score<-scores[i]
if (score>=50) total<-total+i
}
total
###
scores<-c(20,55,67,82,45,33,90,87,100,25)
sum(scores[score>=50])
scores<-c(20,55,67,82,45,33,90,87,100,25)
total<-0
for (i in 1:length(scores)) {
score<-scores[i]
if (score>=50) total<-total+i
}
total
###
scores<-c(20,55,67,82,45,33,90,87,100,25)
sum(scores[scores>=50])
scores<-c(20,55,67,82,45,33,90,87,100,25)
total<-0
for (i in 1:length(scores)) {
score<-scores[i]
if (score>=50) total<-total+i
}
total
### Another way
sum(scores[scores>=50])
scores<-c(20,55,67,82,45,33,90,87,100,25)
total<-0
for (i in 1:length(scores)) {
score<-scores[i]
if (score>=50) total<-total+i
}
total
### Another way
scores[scores>=50]
sum(scores[scores>=50])
scores<-c(20,55,67,82,45,33,90,87,100,25)
total<-0
for (i in 1:length(scores)) {
score<-scores[i]
if (score>=50) total<-total+score
}
total
### Another way
sum(scores[scores>=50])
knitr::opts_chunk$set(echo = TRUE)
Sys.setlocale('LC_ALL',"C")
sum_two<-function(a,b){
rst<-a+b
return(rst)
}
#sum_two(a=3, b=5)
#sum_two(5,3)
c<-sum_two(a=3,b=5)
c
if TRUE aaa<-3
if (TRUE) aaa<-3
aaa
sum_two<-function(a,b){
rst<-a+b
return(rst)
}
#sum_two(a=3, b=5)
#sum_two(5,3)
c<-sum_two(a=3,b=5)
c
sum_two<-function(a,b){
rst<-a+b
return(rst)
}
#sum_two(a=3, b=5)
#sum_two(5,3)
c<-sum_two(a=3,b=5)
c
sum_two<-function(a,b){
rst1<-a+b
rst2<-a-b
return(list(rst1, rst2))
}
#sum_two(a=3, b=5)
c<-sum_two(a=3,b=5)
c
c[[2]]
unlist(sum_two(a=3,b=5))
l1<-list(g1="ABC",g2=1:5,g3=rep("*",3))
l1
unlist(l1) # string takes precedence
l1<-list(g1="ABC",g2=1:5,g3=rep("*",3))
l1
unlist(l1) # list to vector. string takes precedence over integer
l1<-list(g1="ABC",g2=1:5,g3=rep("*",3))
l1
my_vec<-unlist(l1) # list to vector. string takes precedence over integer
my_vec
my_list<-list(vec)
l1<-list(g1="ABC",g2=1:5,g3=rep("*",3))
l1
my_vec<-unlist(l1) # list to vector. string takes precedence over integer
my_vec
my_list<-list(my_vec)
my_list
cal1<-function(a,b){
return(list(a+b,a-b,a*b,a/b))
}
cal1(3,5)
cal1<-function(a,b){
return(list(a=a+b,b=a-b,c=a*b,d=a/b))
}
cal1(3,5)
cal2<-function(a,b,type){
if (type=='add') rst<-a+b
if (type=='minus') rst<-a-b
if (type=='multiply') rst<-a*b
if (type=='divide') rst<-a/b
}
cal2(3,5,'divide)
cal2<-function(a,b,type){
if (type=='add') rst<-a+b
if (type=='minus') rst<-a-b
if (type=='multiply') rst<-a*b
if (type=='divide') rst<-a/b
}
cal2(3,5,'divide')
cal2<-function(a,b,type){
if (type=='add') rst<-a+b
if (type=='minus') rst<-a-b
if (type=='multiply') rst<-a*b
if (type=='divide') rst<-a/b
return(rst)
}
cal2(3,5,'divide')
filter_even<-function(a){
return(a[a%%2==0])
}
input<-c(1,74,4,1,8,45,2341,33,4,6)
filter_even(input)
input<-c(1,74,4,1,8,45,2341,33,4,6)
calc<-function(a){
n = length(a)
return(list(
mean=mean(a)
var=var(a)
input<-c(1,74,4,1,8,45,2341,33,4,6)
calc<-function(a){
n = length(a)
return(list(
mean=mean(a),
var=var(a),
sd=sd(a),
error=sigma(a)/sqrt(n)
))
}
calc(input)
input<-c(1,74,4,1,8,45,2341,33,4,6)
calc<-function(a){
return(list(
mean=mean(a),
var=var(a),
std=sd(a),
stderr=std/sqrt(length(a))
))
}
calc(input)
input<-c(1,74,4,1,8,45,2341,33,4,6)
calc<-function(a){
return(list(
mean=mean(a),
var=var(a),
std=sd(a),
stderr=sd(a)/sqrt(length(a))
))
}
calc(input)
rev("hello")
rev(c(1,2,3,4))
strsplit("hello","")
rev("hello")
rev(c(1,2,3,4))
strsplit("hello","")
strsplit("hello","")[[1]]
rev("hello")
rev(c(1,2,3,4))
strsplit("hello","")
strsplit("hello","")[[1]]
rev_str<-function(org_str){
new_str<-paste0(rev(strsplit(org_str,"")[[1]]),collapse="")
return(new_str)
}
rev_str(hello)
rev("hello")
rev(c(1,2,3,4))
strsplit("hello","")
strsplit("hello","")[[1]]
rev_str<-function(org_str){
new_str<-paste0(rev(strsplit(org_str,"")[[1]]),collapse="")
return(new_str)
}
rev_str('hello')
