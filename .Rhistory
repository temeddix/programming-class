}
i<-i+1
}
if (is_prime) print("소수입니다.") else print("소수가 아닙니다.")
n<-as.integer(readline("수를 입력하세요: "))
i<-2
is_prime<-TRUE
while (i<n) {
if (n%%i==0) {
is_prime<-FALSE
break
}
i<-i+1
}
if (is_prime) print("소수입니다.") else print("소수가 아닙니다.")
n<-as.integer(readline("수를 입력하세요: "))
i<-2
is_prime<-TRUE
while (i<n) {
if (n%%i==0) {
is_prime<-FALSE
break
}
i<-i+1
}
if (is_prime) print("소수입니다.") else print("소수가 아닙니다.")
find_min<-function(a){
found<-a[0]
for (i in a){
if (i<found) found<-i
}
return(found)
}
v = c(17, 92, 18, 33, 58, 7, 33, 42)
find_min(v)
find_min<-function(a){
found<-a[1]
for (i in a){
if (i<found) found<-i
}
return(found)
}
v = c(17, 92, 18, 33, 58, 7, 33, 42)
find_min(v)
m<-"green-red-black-white"
splitted<-strsplit(m, "-")
splitted<-sort(splitted)
m<-"green-red-black-white"
splitted<-strsplit(m, "-")
splitted<-sort(splitted)
m<-"green-red-black-white"
splitted<-strsplit(m, "-")
splitted<-sort(splitted)
m<-"green-red-black-white"
splitted<-strsplit(m, "-")[[1]]
splitted<-sort(splitted)
final<-paste(splitted, collapse="-")
final
knitr::opts_chunk$set(echo = TRUE)
#Sys.setlocale('LC_ALL','C')
n<-as.integer(readline("수를 입력하세요: "))
divisors<-c()
for (i in 1:n) {
if (n%%i==0) divisors<-c(divisors, i)
}
divisors
n<-as.integer(readline("수를 입력하세요: "))
i<-2
is_prime<-TRUE
while (i<n) {
if (n%%i==0) {
is_prime<-FALSE
break
}
i<-i+1
}
if (is_prime) print("소수입니다.") else print("소수가 아닙니다.")
find_min<-function(a){
found<-a[1]
for (i in a){
if (i<found) found<-i
}
return(found)
}
v = c(17, 92, 18, 33, 58, 7, 33, 42)
find_min(v)
m<-"green-red-black-white"
splitted<-strsplit(m, "-")[[1]]
splitted<-sort(splitted)
final<-paste(splitted, collapse="-")
final
knitr::opts_chunk$set(echo = TRUE)
Sys.setlocale('LC_ALL','C')
exam<-read.csv("csv_exam.csv",header=FALSE,col.names=c("id","class","math","english","science"))
exam$class<-as.factor(exam$class)
library(dplyr)  # We need this library
exam %>% arrange(math)
exam %>% arrange(desc(math))
exam %>% arrange(class,math)
exam %>%
filter(math>=50 & (english>=90 | science>=60)) %>%
arrange(class,desc(math))
knitr::opts_chunk$set(echo = TRUE)
Sys.setlocale('LC_ALL','C')
exam<-read.csv("csv_exam.csv",header=FALSE,col.names=c("id","class","math","english","science"))
exam$class<-as.factor(exam$class)
library(dplyr)  # We need this library
exam %>% arrange(math)
exam %>% arrange(desc(math))
exam %>% arrange(class,math)
exam %>%
filter(math>=50 & (english>=90 | science>=60)) %>%
arrange(class,desc(math))
exam %>% mutate(total=math+english+science, ranking=rank(-total))
#`rank`, it can use the `total` variable declared here, on the fly
# exam$total<-exam$math+exam$english+exam$science
# exam$ranking<-rank(-exam$total)
exam %>%
mutate(total=math+english+science, ranking=rank(-total)) %>%
arrange(desc(total))
# With `mutate`, you can receive the variable declared IN the statement itself, resulting in shorter syntax.
exam %>%
mutate(total=math+english+science, ranking=rank(-total)) %>%
arrange(desc(total)) %>%
select(id,total,ranking)
# Using pipe connector `%>%`
install.packages("styler")
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
exam %>%
mutate(avg=(math+english+science)/3, test=ifelse(avg>=60, "pass", "fail"))
exam %>%
mutate(avg=(math+english+science)/3, test=ifelse(avg>=60, "pass", "fail"))
exam %>%
mutate(avg=(math+english+science)/3, test=ifelse(avg>=60, "pass", "fail"))
exam
exam1<-exam%>%
mutate(avg=(math+english+science)/3,
test=ifelse(avg>=60,"pass","fail"))
exam1<-exam%>%
mutate(avg=(math+english+science)/3,
test=ifelse(avg>=60,"pass","fail"))
table(exam1$test)
summary(as.factor(exam1$test))
aggregate(exam1$test,list(exam1$test),length)
#aggregate(id~test,length,data=exam1)
tapply(exam14test)
exam1<-exam%>%
mutate(avg=(math+english+science)/3,
test=ifelse(avg>=60,"pass","fail"))
table(exam1$test)
summary(as.factor(exam1$test))
aggregate(exam1$test,list(exam1$test),length)
#aggregate(id~test,length,data=exam1)
tapply(exam1$test, exam1$test, length)
mpg %>%
filter(manufacturer=="audi") %>%
arrange(desc(hwy)) %>%
head(5)
library(ggplot2) # `mpg` data comes from here
mpg %>%
filter(manufacturer=="audi") %>%
arrange(desc(hwy)) %>%
head(5)
library(ggplot2) # `mpg` data comes from here
mpg %>%
filter(manufacturer=="audi") %>%
arrange(desc(hwy)) %>%
head(5)
mpg %>%
filter(manufacturer=="audi") %>%
mutate(ranking=rank(-hwy)) %>%
filter(ranking<=5)
library(ggplot2) # `mpg` data comes from here
mpg %>%
filter(manufacturer=="audi") %>%
arrange(desc(hwy)) %>%
head(5)
mpg %>%
filter(manufacturer=="audi") %>%
mutate(ranking=rank(-hwy)) %>%
filter(ranking<=5)
knitr::opts_chunk$set(echo = TRUE)
Sys.setlocale('LC_ALL','C')
exam<-read.csv("csv_exam.csv",header=FALSE,col.names=c("id","class","math","english","science"))
exam$class<-as.factor(exam$class)
library(dplyr)  # We need this library
exam %>% arrange(math)
exam %>% arrange(desc(math))
exam %>% arrange(class,math)
exam %>%
filter(math>=50 & (english>=90 | science>=60)) %>%
arrange(class,desc(math))
exam %>% mutate(total=math+english+science, ranking=rank(-total))
#`rank`, it can use the `total` variable declared here, on the fly
# exam$total<-exam$math+exam$english+exam$science
# exam$ranking<-rank(-exam$total)
exam %>%
mutate(total=math+english+science, ranking=rank(-total)) %>%
arrange(desc(total))
# With `mutate`, you can receive the variable declared IN the statement itself, resulting in shorter syntax.
exam %>%
mutate(total=math+english+science, ranking=rank(-total)) %>%
arrange(desc(total)) %>%
select(id,total,ranking)
# Using pipe connector `%>%`
exam %>%
mutate(total=math+english+science, ranking=rank(-total)) %>%
arrange(desc(total)) %>%
filter(class=="3") %>%
select(id,total,ranking)
exam %>%
mutate(avg=(math+english+science)/3, test=ifelse(avg>=60, "pass", "fail"))
exam1<-exam%>%
mutate(avg=(math+english+science)/3,
test=ifelse(avg>=60,"pass","fail"))
table(exam1$test)
summary(as.factor(exam1$test))
aggregate(exam1$test,list(exam1$test),length)
#aggregate(id~test,length,data=exam1)
tapply(exam1$test, exam1$test, length)
#tapply(exam1$id, exam1$test, length)
# IMPORTANT. These were introduced many times in the class
library(ggplot2) # `mpg` data comes from here
mpg %>%
filter(manufacturer=="audi") %>%
arrange(desc(hwy)) %>%
head(5)
mpg %>%
filter(manufacturer=="audi") %>%
mutate(ranking=rank(-hwy)) %>%
filter(ranking<=5)
#ex5
mpg_data1<-mpg %>%
mutate(plus_y=cty+hwy)
#ex6
mpg_data1<-mpg_data1 %>%
mutate(mean_y=plus_y/2)
#ex7
mpg_data %>%
arrange(desc(mean_y)) %>%
select(manufacturer, model, mean_y) %>%
head(3)
#ex5~ex7
mpg_data <- mpg %>%
mutate(plus_y = cty + hwy) %>%
mutate(mean_y = plus_y / 2) %>%
arrange(desc(mean_y)) %>%
select(manufacturer, model, mean_y) %>%
head(3)
#ex5~ex7
mpg_data <- mpg %>%
mutate(plus_y = cty + hwy) %>%
mutate(mean_y = plus_y / 2) %>%
arrange(desc(mean_y)) %>%
select(manufacturer, model, mean_y) %>%
head(3)
mpg_data
knitr::opts_chunk$set(echo = TRUE)
Sys.setlocale('LC_ALL','C')
exam<-read.csv("csv_exam.csv",header=FALSE,col.names=c("id","class","math","english","science"))
exam$class<-as.factor(exam$class)
library(dplyr)
exam %>% summarise(mean_math=mean(math))
mean(exam$math)
exam %>%
mutate(test=ifelse(science>=60,"pass","fail")) %>%
group_by(class,test ) %>%
summarise(avg=mean(math),SD=sd(math),freq=n())
aggregate(math~class+test, data=exam1, mean)
exam %>%
mutate(test=ifelse(science>=60,"pass","fail")) %>%
group_by(class,test ) %>%
summarise(avg=mean(math),SD=sd(math),freq=n())
aggregate(math~class+test, data=exam1, mean)
exam %>%
filter(id%%2==0) %>%
mutate(test=ifelse(science>=60,"pass","fail")) %>%
group_by(test  ) %>%
summarise(avg=mean(math), SD=sd(math), freq=n())
ex1<-data.frame(x=c(rep("a",3), rep("b",3)), y=rep(c("a","b","c"),2), z=1:6)
ex1 %>% summarise(first(x), last(x), nth(z,3))
exam %>%
mutate(total=math+english+science) %>%
group_by(class) %>%
mutate(ranking=rank(-total)) %>%
arrange(class,desc(total))
knitr::opts_chunk$set(echo = TRUE)
Sys.setlocale('LC_ALL','C')
exam<-read.csv("csv_exam.csv",header=FALSE,col.names=c("id","class","math","english","science"))
exam$class<-as.factor(exam$class)
library(dplyr)
exam %>% summarise(mean_math=mean(math))
mean(exam$math)
exam %>%
group_by(class) %>%
summarise(avg=mean(math),SD=sd(math), total=sum(math), min_x=min(math),max_x=max(math), freq=n())
exam %>%
mutate(test=ifelse(science>=60,"pass","fail")) %>%
group_by(class,test ) %>%
summarise(avg=mean(math),SD=sd(math),freq=n())
aggregate(math~class+test, data=exam1, mean)
exam %>%
mutate(test=ifelse(science>=60,"pass","fail")) %>%
group_by(test,class ) %>%
summarise(avg=mean(math),SD=sd(math),freq=n()) %>%
arrange(test,avg)
exam %>%
filter(id%%2==0) %>%
mutate(test=ifelse(science>=60,"pass","fail")) %>%
group_by(test  ) %>%
summarise(avg=mean(math), SD=sd(math), freq=n())
styler:::style_active_pkg()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_pkg()
knitr::opts_chunk$set(echo = TRUE)
Sys.setlocale("LC_ALL", "C")
names(df2)[2] <- "data2"
knitr::opts_chunk$set(echo = TRUE)
Sys.setlocale("LC_ALL", "C")
exam <- read.csv("csv_exam.csv", header = FALSE, col.names = c("id", "class", "math", "english", "science"))
exam$class <- as.factor(exam$class)
library(dplyr)
exam %>% summarise(mean_math = mean(math))
mean(exam$math)
exam %>%
group_by(class) %>%
summarise(avg = mean(math), SD = sd(math), total = sum(math), min_x = min(math), max_x = max(math), freq = n())
exam %>%
mutate(test = ifelse(science >= 60, "pass", "fail")) %>%
group_by(class, test) %>%
summarise(avg = mean(math), SD = sd(math), freq = n())
aggregate(math ~ class + test, data = exam1, mean)
exam %>%
mutate(test = ifelse(science >= 60, "pass", "fail")) %>%
group_by(test, class) %>%
summarise(avg = mean(math), SD = sd(math), freq = n()) %>%
arrange(test, avg)
exam %>%
filter(id %% 2 == 0) %>%
mutate(test = ifelse(science >= 60, "pass", "fail")) %>%
group_by(test) %>%
summarise(avg = mean(math), SD = sd(math), freq = n())
exam %>%
mutate(total = math + english + science) %>%
group_by(class) %>%
mutate(ranking = rank(-total)) %>%
arrange(class, desc(total))
ex1 <- data.frame(x = c(rep("a", 3), rep("b", 3)), y = rep(c("a", "b", "c"), 2), z = 1:6)
ex1 %>% summarise(first(x), last(x), nth(z, 3))
df1 <- data.frame(Key = letters[1:5], data1 = seq(10, 14))
df2 <- data.frame(Key = c("a", "b", "f"), data1 = seq(0, 2))
bind_rows(df1, df2)
names(df2)[2] <- "data2"
bind_ros(df1, df2)
names(df2)[2] <- "data2"
bind_rows(df1, df2)
# `rbind`  # Results in error
df3 <- data.frame(Key = LETTERS[1:5], data2 = seq(0, 4))
bind_cols(df1, df3)
names<-data.frame(class=c("1","2","3","4","5","기타"))
teacher=c("Kim","Lee","Park","Choi","Jung","Chung")
left_join(exam, names, by="class")
names<-data.frame(class=c("1","2","3","4","5","기타"))
teacher=c("Kim","Lee","Park","Choi","Jung","Chung")
left_join(teacher, names, by="class")
names<-data.frame(class=c("1","2","3","4","5","기타"),
teacher=c("Kim","Lee","Park","Choi","Jung","Chung"))
left_join(exam, names, by="class")
styler:::style_active_file()
styler:::style_active_file()
knitr::opts_chunk$set(echo = TRUE)
Sys.setlocale("LC_ALL", "C")
exam <- read.csv("csv_exam.csv", header = FALSE, col.names = c("id", "class", "math", "english", "science"))
exam$class <- as.factor(exam$class)
library(dplyr)
exam %>% summarise(mean_math = mean(math))
mean(exam$math)
exam %>%
group_by(class) %>%
summarise(avg = mean(math), SD = sd(math), total = sum(math), min_x = min(math), max_x = max(math), freq = n())
exam %>%
mutate(test = ifelse(science >= 60, "pass", "fail")) %>%
group_by(class, test) %>%
summarise(avg = mean(math), SD = sd(math), freq = n())
aggregate(math ~ class + test, data = exam1, mean)
exam %>%
mutate(test = ifelse(science >= 60, "pass", "fail")) %>%
group_by(test, class) %>%
summarise(avg = mean(math), SD = sd(math), freq = n()) %>%
arrange(test, avg)
exam %>%
filter(id %% 2 == 0) %>%
mutate(test = ifelse(science >= 60, "pass", "fail")) %>%
group_by(test) %>%
summarise(avg = mean(math), SD = sd(math), freq = n())
exam %>%
mutate(total = math + english + science) %>%
group_by(class) %>%
mutate(ranking = rank(-total)) %>%
arrange(class, desc(total))
ex1 <- data.frame(x = c(rep("a", 3), rep("b", 3)), y = rep(c("a", "b", "c"), 2), z = 1:6)
ex1 %>% summarise(first(x), last(x), nth(z, 3))
df1 <- data.frame(Key = letters[1:5], data1 = seq(10, 14))
df2 <- data.frame(Key = c("a", "b", "f"), data1 = seq(0, 2))
bind_rows(df1, df2)
names(df2)[2] <- "data2"
bind_rows(df1, df2)
# `rbind` results in error
df3 <- data.frame(Key = LETTERS[1:5], data2 = seq(0, 4))
bind_cols(df1, df3) # Makes new name
left_join(df1, df2, by = "Key")
right_join(df1, df2, by = "Key")
# Actually, just switching two parameters with `left_join` is fine.
inner_join(df1, df2, by = "Key")
# Only select the commons
full_join(df1, df2, by = "Key")
# Include all exclusives
names <- data.frame(
class = c("1", "2", "3", "4", "5", "Others"),
teacher = c("Kim", "Lee", "Park", "Choi", "Jung", "Chung")
)
left_join(exam, names, by = "class")
exam1<-exam %>% mutaet(total=math+english+science) %>%
group_by(type) %>%
summarise(avt_total=mean(total))
exam1<-exam %>% mutate(total=math+english+science) %>%
group_by(type) %>%
summarise(avt_total=mean(total))
exam1<-exam %>% mutate(total=math+english+science) %>%
group_by(Type) %>%
summarise(avt_total=mean(total))
knitr::opts_chunk$set(echo = TRUE)
Sys.setlocale("LC_ALL", "C")
exam <- read.csv("csv_exam.csv", header = FALSE, col.names = c("id", "class", "math", "english", "science"))
exam$class <- as.factor(exam$class)
library(dplyr)
exam %>% summarise(mean_math = mean(math))
mean(exam$math)
exam %>%
group_by(class) %>%
summarise(avg = mean(math), SD = sd(math), total = sum(math), min_x = min(math), max_x = max(math), freq = n())
exam %>%
mutate(test = ifelse(science >= 60, "pass", "fail")) %>%
group_by(class, test) %>%
summarise(avg = mean(math), SD = sd(math), freq = n())
aggregate(math ~ class + test, data = exam1, mean)
exam %>%
mutate(test = ifelse(science >= 60, "pass", "fail")) %>%
group_by(test, class) %>%
summarise(avg = mean(math), SD = sd(math), freq = n()) %>%
arrange(test, avg)
exam %>%
filter(id %% 2 == 0) %>%
mutate(test = ifelse(science >= 60, "pass", "fail")) %>%
group_by(test) %>%
summarise(avg = mean(math), SD = sd(math), freq = n())
exam %>%
mutate(total = math + english + science) %>%
group_by(class) %>%
mutate(ranking = rank(-total)) %>%
arrange(class, desc(total))
ex1 <- data.frame(x = c(rep("a", 3), rep("b", 3)), y = rep(c("a", "b", "c"), 2), z = 1:6)
ex1 %>% summarise(first(x), last(x), nth(z, 3))
df1 <- data.frame(Key = letters[1:5], data1 = seq(10, 14))
df2 <- data.frame(Key = c("a", "b", "f"), data1 = seq(0, 2))
bind_rows(df1, df2)
names(df2)[2] <- "data2"
bind_rows(df1, df2)
# `rbind` results in error
df3 <- data.frame(Key = LETTERS[1:5], data2 = seq(0, 4))
bind_cols(df1, df3) # Makes new name
left_join(df1, df2, by = "Key")
right_join(df1, df2, by = "Key")
# Actually, just switching two parameters with `left_join` is fine.
inner_join(df1, df2, by = "Key")
# Only select the commons
full_join(df1, df2, by = "Key")
# Include all exclusives
names <- data.frame(
class = c("1", "2", "3", "4", "5", "Others"),
teacher = c("Kim", "Lee", "Park", "Choi", "Jung", "Chung")
)
left_join(exam, names, by = "class")
exam <- rename(exam,
Key = id,
type = class
)
head(exam)
exam1<-exam %>%
mutate(total=math+english+science) %>%
group_by(type) %>%
summarise(avt_total=mean(total))
left_join(rename(exam,id=Key, class=type),
rename(exam1, class=type),by=class)
styler:::style_active_file()
exam1 <- exam %>%
mutate(total = math + english + science) %>%
group_by(type) %>%
summarise(avt_total = mean(total))
left_join(rename(exam, id = Key, class = type),
rename(exam1, class = type),
by = class
)
mpg_group <- mpg %>%
group_by(class) %>%
summarise(avg=mean(cty))
mpg_group
