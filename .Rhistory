# mpg_cty[!duplicated(mpg_cty),]
# unique(mpg_cty)
df<- data.frame(sex=c("M","F",NA,"M","F"),
score=c(5,4,3,4,NA))
df %>% filter(is.na(score) & is.na(sex))
df %>% filter(!is.na(df$score))
df %>% filter(!is.na(score) & !is.na(sex))
na.omit(df)
styler:::style_active_file()
knitr::opts_chunk$set(echo = TRUE)
Sys.setlocale("LC_ALL", "C")
library(dplyr) # We need this library
exam %>% arrange(math)
library(dplyr) # We need this library
exam %>% arrange(math)  # column keyword is possible here
desc(exam$math)
exam %>% arrange(desc(math))
desc(exam$math)
exam %>% arrange(desc(math)) # Just memorize `arrange(desc(v))`
exam %>% arrange(class, math) # Two columns
exam %>%
filter(math >= 50 & (english >= 90 | science >= 60)) %>%
arrange(class, desc(math))
exam %>% mutate(total = math + english + science, ranking = rank(-total))
# `rank` can use the `total` variable declared in `mutate`, on the fly
# exam$total<-exam$math+exam$english+exam$science
# exam$ranking<-rank(-exam$total)
exam %>%
mutate(total = math + english + science, ranking = rank(-total)) %>%
arrange(desc(total)) %>%
select(id, total, ranking)
# Using pipe connector `%>%`
exam %>%
mutate(total = math + english + science, ranking = rank(-total)) %>%
arrange(desc(total)) %>%
filter(class == "3") %>%
select(id, total, ranking)
exam1 <- exam %>%
mutate(
avg = (math + english + science) / 3,
test = ifelse(avg >= 60, "pass", "fail")
)
table(exam1$test)
summary(as.factor(exam1$test))
aggregate(exam1$test, list(exam1$test), length)
# aggregate(id~test,length,data=exam1)
tapply(exam1$test, exam1$test, length)
# tapply(exam1$id, exam1$test, length)
# IMPORTANT. These were introduced many times in the class
exam1 <- exam %>%
mutate(
avg = (math + english + science) / 3,
test = ifelse(avg >= 60, "pass", "fail")
)
table(exam1$test)
summary(as.factor(exam1$test))
aggregate(exam1$test, exam1$test, length)
exam1 <- exam %>%
mutate(
avg = (math + english + science) / 3,
test = ifelse(avg >= 60, "pass", "fail")
)
table(exam1$test)
summary(as.factor(exam1$test))
aggregate(exam1$test, list(exam1$test), length)
# aggregate(id~test,length,data=exam1)
tapply(exam1$test, exam1$test, length)
# tapply(exam1$id, exam1$test, length)
# IMPORTANT. These were introduced many times in the class
exam1 <- exam %>%
mutate(
avg = (math + english + science) / 3,
test = ifelse(avg >= 60, "pass", "fail")
)
table(exam1$test)
summary(as.factor(exam1$test))
tapply(exam1$test, exam1$test, length)
tapply(exam1$id, exam1$test, length)
aggregate(exam1$test, list(exam1$test), length)
aggregate(id~test,length,data=exam1)
# IMPORTANT. These were introduced many times in the class
exam1 <- exam %>%
mutate(
avg = (math + english + science) / 3,
test = ifelse(avg >= 60, "pass", "fail")
)
table(exam1$test)
summary(as.factor(exam1$test))
tapply(exam1$test, exam1$test, length)
tapply(exam1$id, exam1$test, length)
aggregate(exam1$test, list(exam1$test), length)
# To use column keywords in `aggregate`,
# you need to provide the data
aggregate(id~test,length,data=exam1)
# IMPORTANT. These were introduced many times in the class
exam1 <- exam %>%
mutate(
avg = (math + english + science) / 3,
test = ifelse(avg >= 60, "pass", "fail")
)
table(exam1$test)
summary(as.factor(exam1$test))
tapply(exam1$test, exam1$test, length)
tapply(exam1$id, exam1$test, length)
aggregate(exam1$test, list(exam1$test), length)
# To use column keywords in `aggregate`,
# you need to provide the data
aggregate(id~test,length,data=exam1)
# IMPORTANT. These were introduced many times in the class
library(ggplot2) # `mpg` data comes from here
mpg %>%
filter(manufacturer == "audi") %>%
arrange(desc(hwy)) %>%
head(5)
mpg %>%
filter(manufacturer == "audi") %>%
mutate(ranking = rank(-hwy)) %>%  # Remember the `rank` function
filter(ranking <= 5)
# ex5~ex7
mpg_data <- mpg %>%
mutate(plus_y = cty + hwy) %>%
mutate(mean_y = plus_y / 2) %>%
arrange(desc(mean_y)) %>%
select(manufacturer, model, mean_y) %>%
head(3)
mpg_data
styler:::style_active_file()
exam1 <- exam %>%
mutate(
avg = (math + english + science) / 3,
test = ifelse(avg >= 60, "pass", "fail")
)
table(exam1$test) # table(vector)
summary(as.factor(exam1$test)) # summary(factor)
tapply(exam1$test, exam1$test, length) # tapply(vector, vector, function)
tapply(exam1$id, exam1$test, length)
# You can just pass in anonymous vectors to `aggregate`
aggregate(exam1$test, list(exam1$test), length)
# Or, to use column keywords with tilda(~) in `aggregate`,
# you need to provide the `data`
aggregate(id ~ test, length, data = exam1)
# IMPORTANT. These were introduced many times in the class
knitr::opts_chunk$set(echo = TRUE)
Sys.setlocale("LC_ALL", "C")
library(dplyr) # IMPORTANT
exam %>% summarise(mean_math = mean(math))
mean(exam$math)
knitr::opts_chunk$set(echo = TRUE)
Sys.setlocale("LC_ALL", "C")
exam <- read.csv("csv_exam.csv", header = FALSE, col.names = c("id", "class", "math", "english", "science"))
exam$class <- as.factor(exam$class)
library(dplyr) # IMPORTANT
exam
exam %>% summarise(mean_math = mean(math))
mean(exam$math)
library(dplyr) # IMPORTANT
exam
# It's such a simple function, will it be in the exam?
exam %>% summarise(mean_math = mean(math))
mean(exam$math)
library(dplyr) # IMPORTANT
exam
# It's such a simple function, will it be in the exam?
exam %>% summarize(mean_math = mean(math))
mean(exam$math)
exam %>%
group_by(class) %>%  # New function, `group_by`
summarize(
avg = mean(math),
SD = sd(math),
total = sum(math),
min_x = min(math),
max_x = max(math),
freq = n()
)
exam %>% group_by(class)
exam %>%
group_by(class) %>%  # New function, `group_by`
summarize(
avg = mean(math),
SD = sd(math),
total = sum(math),
min_x = min(math),
max_x = max(math),
freq = n()
)
exam
exam %>% group_by(class)
exam %>%
group_by(class) %>%  # New function, `group_by`
summarize(
avg = mean(math),
SD = sd(math),
total = sum(math),
min_x = min(math),
max_x = max(math),
freq = n()
)
exam
exam %>% group_by(class) # Looks the same yet
exam %>%
group_by(class) %>%  # New function, `group_by`
summarize(
avg = mean(math),
SD = sd(math),
total = sum(math),
min_x = min(math),
max_x = max(math),
freq = n()
)
exam %>%
mutate(test = ifelse(science >= 60, "pass", "fail")) %>%
group_by(class, test) %>%  # You can group by MULTIPLE columns!
summarize(avg = mean(math), SD = sd(math), freq = n())
# The same thing when you only need `mean`
aggregate(math ~ class + test, data = exam1, mean)
# `group_by`, `summarize`
exam %>%
mutate(test = ifelse(science >= 60, "pass", "fail")) %>%
group_by(class, test) %>%  # You can group by MULTIPLE columns!
summarize(avg = mean(math), SD = sd(math), freq = n())
# The same thing when you only need `mean`
aggregate(math ~ class + test, data = exam1, mean)
exam %>%
mutate(test = ifelse(science >= 60, "pass", "fail")) %>%
group_by(test, class) %>%
summarize(avg = mean(math), SD = sd(math), freq = n()) %>%
arrange(test, avg)
exam %>%
mutate(total = math + english + science) %>%
group_by(class) %>%
mutate(ranking = rank(-total)) %>%
arrange(class, desc(total))
ex1 <- data.frame(x = c(rep("a", 3), rep("b", 3)), y = rep(c("a", "b", "c"), 2), z = 1:6)
ex1 %>% summarize(first(x), last(x), nth(z, 3))
df1 <- data.frame(Key = letters[1:5], data1 = seq(10, 14))
df2 <- data.frame(Key = c("a", "b", "f"), data1 = seq(0, 2))
bind_rows(df1, df2)
names(df2)[2] <- "data2"
bind_rows(df1, df2)
# `rbind` results in error
names(df2)[2] <- "data2"
bind_rows(df1, df2)
rbind(df1, df2) # Results in an error
names(df2)[2] <- "data2"
bind_rows(df1, df2)
# rbind(df1, df2) # Results in an error
df3 <- data.frame(Key = LETTERS[1:5], data2 = seq(0, 4))
bind_cols(df1, df3) # Makes new name
df1 <- data.frame(Key = letters[1:5], data1 = seq(10, 14))
df2 <- data.frame(Key = c("a", "b", "f"), data1 = seq(0, 2))
df1
df2
bind_rows(df1, df2)
left_join(df1, df2, by = "Key")
right_join(df1, df2, by = "Key")
# Actually, just switching two parameters with `left_join` is fine.
df3 <- data.frame(Key = LETTERS[1:5], data2 = seq(0, 4))
df3
bind_cols(df1, df3) # Makes new name
inner_join(df1, df2, by = "Key")
# Only select the commons
full_join(df1, df2, by = "Key")
# Include all exclusives
names <- data.frame(
class = c("1", "2", "3", "4", "5", "Others"),
teacher = c("Kim", "Lee", "Park", "Choi", "Jung", "Chung")
)
left_join(exam, names, by = "class")
# New function `rename`
exam <- rename(
exam,
Key = id,
type = class
)
head(exam)
exam1 <- exam %>%
mutate(total = math + english + science) %>%
group_by(type) %>%
summarize(avg_total = mean(total))
left_join(
rename(exam, id = Key, class = type),
rename(exam1, class = type),
by = class
)
exam1 <- exam %>%
mutate(total = math + english + science) %>%
group_by(type) %>%
summarize(avg_total = mean(total))
left_join(
rename(exam, id = Key, class = type),
rename(exam1, class = type),
by = 'class'  # Without quotes, it results in an error
)
mpg_group <- mpg %>%
group_by(class) %>%
summarize(avg=mean(cty))
mpg_group
mpg_group<-rename(mpg_group[2]<-"avg")
mpg_group %>% arrange(cty)
mpg_group %>% arrange(avg)
knitr::opts_chunk$set(echo = TRUE)
Sys.setlocale("LC_ALL", "C")
exam <- read.csv("csv_exam.csv", header = FALSE, col.names = c("id", "class", "math", "english", "science"))
exam$class <- as.factor(exam$class)
library(dplyr) # We need this library
exam %>% arrange(math) # Column keyword is possible here
desc(exam$math)
exam %>% arrange(desc(math)) # Just memorize `arrange(desc(v))`
mpg_group %>% arrange(avg)
knitr::opts_chunk$set(echo = TRUE)
Sys.setlocale("LC_ALL", "C")
exam <- read.csv("csv_exam.csv", header = FALSE, col.names = c("id", "class", "math", "english", "science"))
exam$class <- as.factor(exam$class)
library(dplyr) # IMPORTANT
exam
# It's such a simple function, will it be in the exam?
exam %>% summarize(mean_math = mean(math))
mean(exam$math)
exam
exam %>% group_by(class) # Looks the same yet
exam %>%
group_by(class) %>%  # New function, `group_by`
summarize(  # It's done by group! Column keywords are possible
avg = mean(math),
SD = sd(math),
total = sum(math),
min_x = min(math),
max_x = max(math),
freq = n()
)
# `group_by`, `summarize`, n()
# `length()` for vectors, `n()` for columns
exam %>%
mutate(test = ifelse(science >= 60, "pass", "fail")) %>%
group_by(class, test) %>%  # You can group by MULTIPLE columns!
summarize(avg = mean(math), SD = sd(math), freq = n())
# The same thing when you only need `mean`
aggregate(math ~ class + test, data = exam1, mean)
mpg_group %>% arrange(avg)
exam1 <- exam %>%
mutate(total = math + english + science) %>%
group_by(type) %>%
summarize(avg_total = mean(total))
knitr::opts_chunk$set(echo = TRUE)
Sys.setlocale("LC_ALL", "C")
exam <- read.csv("csv_exam.csv", header = FALSE, col.names = c("id", "class", "math", "english", "science"))
exam$class <- as.factor(exam$class)
library(dplyr) # IMPORTANT
exam
# It's such a simple function, will it be in the exam?
exam %>% summarize(mean_math = mean(math))
mean(exam$math)
exam
exam %>% group_by(class) # Looks the same yet
exam %>%
group_by(class) %>%  # New function, `group_by`
summarize(  # It's done by group! Column keywords are possible
avg = mean(math),
SD = sd(math),
total = sum(math),
min_x = min(math),
max_x = max(math),
freq = n()
)
# `group_by`, `summarize`, n()
# `length()` for vectors, `n()` for columns
exam %>%
mutate(test = ifelse(science >= 60, "pass", "fail")) %>%
group_by(class, test) %>%  # You can group by MULTIPLE columns!
summarize(avg = mean(math), SD = sd(math), freq = n())
# The same thing when you only need `mean`
aggregate(math ~ class + test, data = exam1, mean)
exam1 <- exam %>%
mutate(total = math + english + science) %>%
group_by(type) %>%
summarize(avg_total = mean(total))
knitr::opts_chunk$set(echo = TRUE)
Sys.setlocale("LC_ALL", "C")
exam <- read.csv("csv_exam.csv", header = FALSE, col.names = c("id", "class", "math", "english", "science"))
exam$class <- as.factor(exam$class)
library(dplyr) # IMPORTANT
exam
# It's such a simple function, will it be in the exam?
exam %>% summarize(mean_math = mean(math))
mean(exam$math)
exam
exam %>% group_by(class) # Looks the same yet
exam %>%
group_by(class) %>%  # New function, `group_by`
summarize(  # It's done by group! Column keywords are possible
avg = mean(math),
SD = sd(math),
total = sum(math),
min_x = min(math),
max_x = max(math),
freq = n()
)
# `group_by`, `summarize`, n()
# `length()` for vectors, `n()` for columns
exam %>%
mutate(test = ifelse(science >= 60, "pass", "fail")) %>%
group_by(class, test) %>%  # You can group by MULTIPLE columns!
summarize(avg = mean(math), SD = sd(math), freq = n())
# The same thing when you only need `mean`
aggregate(math ~ class + test, data = exam1, mean)
knitr::opts_chunk$set(echo = TRUE)
Sys.setlocale("LC_ALL", "C")
exam <- read.csv("csv_exam.csv", header = FALSE, col.names = c("id", "class", "math", "english", "science"))
exam$class <- as.factor(exam$class)
library(dplyr) # IMPORTANT
exam
# It's such a simple function, will it be in the exam?
exam %>% summarize(mean_math = mean(math))
mean(exam$math)
exam
exam %>% group_by(class) # Looks the same yet
exam %>%
group_by(class) %>%  # New function, `group_by`
summarize(  # It's done by group! Column keywords are possible
avg = mean(math),
SD = sd(math),
total = sum(math),
min_x = min(math),
max_x = max(math),
freq = n()
)
# `group_by`, `summarize`, n()
# `length()` for vectors, `n()` for columns
exam %>%
mutate(test = ifelse(science >= 60, "pass", "fail")) %>%
group_by(class, test) %>%  # You can group by MULTIPLE columns!
summarize(avg = mean(math), SD = sd(math), freq = n())
# The same thing when you only need `mean`
aggregate(math ~ class + test, data = exam1, mean)
knitr::opts_chunk$set(echo = TRUE)
Sys.setlocale("LC_ALL", "C")
exam <- read.csv("csv_exam.csv", header = FALSE, col.names = c("id", "class", "math", "english", "science"))
exam$class <- as.factor(exam$class)
library(dplyr) # IMPORTANT
exam
# It's such a simple function, will it be in the exam?
exam %>% summarize(mean_math = mean(math))
mean(exam$math)
exam
exam %>% group_by(class) # Looks the same yet
exam %>%
group_by(class) %>%  # New function, `group_by`
summarize(  # It's done by group! Column keywords are possible
avg = mean(math),
SD = sd(math),
total = sum(math),
min_x = min(math),
max_x = max(math),
freq = n()
)
# `group_by`, `summarize`, n()
# `length()` for vectors, `n()` for columns
exam %>%
mutate(test = ifelse(science >= 60, "pass", "fail")) %>%
group_by(class, test) %>%  # You can group by MULTIPLE columns!
summarize(avg = mean(math), SD = sd(math), freq = n())
# The same thing when you only need `mean`
aggregate(math ~ class + test, data = exam1, mean)
exam
exam1 <- exam %>%
mutate(total = math + english + science) %>%
group_by(type) %>%
summarize(avg_total = mean(total))
# New function `rename`
exam <- rename(
exam,
Key = id,
type = class
)
head(exam)
exam
exam1 <- exam %>%
mutate(total = math + english + science) %>%
group_by(type) %>%
summarize(avg_total = mean(total))
joined<-left_join(
rename(exam, id = Key, class = type),
rename(exam1, class = type),  # Merging the 'summarized dataframe'
by = 'class'  # Without quotes, it results in an error
)
joined
mpg_group <- mpg %>%
group_by(class) %>%
summarize(avg=mean(cty))
mpg_group
mpg
mpg_group <- mpg %>%
group_by(class) %>%
summarize(avg=mean(cty))
mpg_group
joined<-left_join(mpg, mpg_group, by="class")
joined %>% arrange(class)
joined<-left_join(mpg, mpg_group, by="class")
joined %>% arrange(desc(avg))
grouped<-mpg%>%group_by('manufacturer')%>% summarize(avg_hwy=mean(hwy))
grouped %>% arrange(avg_hwy) %>% head(3)
grouped<-mpg%>%group_by('manufacturer')%>% summarize(avg_hwy=mean(hwy))
grouped
grouped %>% arrange(avg_hwy) %>% head(3)
grouped <- mpg%>%group_by(manufacturer)%>% summarize(avg_hwy=mean(hwy))
grouped
grouped %>% arrange(avg_hwy) %>% head(3)
mpg %>% group_by(manufacturer) %>%
filter(class=="compact") %>%
summarize(compact_count = n()) %>%
arrange(desc(compact_count))
