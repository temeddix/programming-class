a<-10
b<-1+9
10>3 & a==b # TRUE and TRUE 이므로 TRUE
3>10 & a==b # FALSE and TRUE 이므로 FALSE (and는 둘 중 하나라도 FALSE가 있으면 FALSE)
3>10 | a==b # FALSE or TRUE 이므로 TRUE (or은 둘중 하나가 TRUE이므로 TRUE)
a<-1:3  # a=c(1,2,3)
a==1 # 3개의 요소에서 1인 값은 TRUE
sum(a==1) # TRUE는 1, FALSE는 0을 반환하여 sum하면 1
var1<-1:10
var2=var1[var1%%2==0]
var2
a<- 1:10
a+3  # vector의 모든 요소에 3를 더함
a^2  # 제곱승
sqrt(a) #루트값
knitr::opts_chunk$set(echo = TRUE)
Sys.setlocale('LC_ALL','C')
temp<-c(1,2,3,4,5)
temp
temp1<-c("a","b","c")
temp1
temp2<-c(temp,temp1)
temp2
temp2
temp2[1]
temp2[1:5]
temp2[-2] #index 2번째 해당하는 요소를 제외
temp2[-c(1,3)] #index 첫번째와 세번째 해당하는 요소를 제외
1:10 #1~10까지 정수
seq(from=1,10,by=1)
seq(10) #1~10까지 정수
seq(-2,5) # -2~5까지 정수
seq(0,10,by=2) #0~10까지 2씩 증가된 정수
seq(1,10,length=20) #1~10까지 20개의 sequence
seq(0.1, 0.9, by=0.01) # 0.1~0.9까지 0.01씩 증가
letters #소문자 알파벳 배열
LETTERS #대문자 알파벳 배열
letters[1:10]
length(letters)
LETTERS[17:26] #대문자 알파벳 배열
LETTERS[22:24]
#또는
head(letters)
tail(LETTERS,10)
seq(0,1,by=0.1)
rep(1,10) # 1이 10번 반복된 sequence
rep(seq(1,3),3) # (1,2,3)이 3번 반복
a=seq(1,3)
rep(a,each=3) #(1,2,3)의 각 요소들이 각각 3번씩 반복
rep(a,c(2,1,3)) # 1은 2번, 2는 1번, 3은 3번 반복
rep(c("a","b"),2) #("a","b")를 2번 반복
var1<-c(1,2,3,4)
var2<-rep(var1,c(2,1,2,1))
var2
paste("a","b","c") #3개의 요소로 되어 있는 vector 문자들을 하나의 요소로 합침
paste("a","b","c",sep="") # 문자들 사이 space가 없게
paste0("a","b","c") # sep=""이 옵션이 디폴트인 paste
temp<-paste0(rep("x",3),1:3 ) #("x","x","x")에 (1,2,3)를 차례대로 연결
temp
length(temp) #temp 변수의 요소의 갯수 결
paste(letters,1:26,sep="") #소문자 알파벳 다음에 1~26를 연결
paste0(letters,1:26)
var1<-1:10
var2<-c("st","nd","rd",rep("th",7))
var3<-paste0(var1,var2)
var3
10>3 # 10은 3보다 크므로 TRUE
3>10 #FALSE
a<-10
b<-1+9
a==b #a와 b 모두 10 으로 같음(==)  TRUE
a!=b # a와 b는 같지 않음(!=) 이 아니므로 FALSE
!TRUE #TRUE가 아님(!)은 FALSE
0.1+0.2==0.3 #부동소수점
a<-10
b<-1+9
10>3 & a==b # TRUE and TRUE 이므로 TRUE
3>10 & a==b # FALSE and TRUE 이므로 FALSE (and는 둘 중 하나라도 FALSE가 있으면 FALSE)
3>10 | a==b # FALSE or TRUE 이므로 TRUE (or은 둘중 하나가 TRUE이므로 TRUE)
a<-1:3  # a=c(1,2,3)
a==1 # 3개의 요소에서 1인 값은 TRUE
sum(a==1) # TRUE는 1, FALSE는 0을 반환하여 sum하면 1
a<-letters[1:4] #a=c("a","b","c","d")
a
a==c("a","c") # 처음 나오는 하나의 값만 인식
a %in% c("a","c") # 여러개의 요소를 파악할 때 %in% 사용
var1<-1:10
var2=var1[var1%%2==0]
var2
a<- 1:10
a+3  # vector의 모든 요소에 3를 더함
a^2  # 제곱승
sqrt(a) #루트값
sum(a) #모든 요소의 합
mean(a) # 평균값
median(a) # 중앙값
max(a) #제일 큰값
min(a)
range(a) #()
var(a) #variance
sd(a) #standard deviation
length(a) #요소 개수
sort(a,decreasing=TRUE) #내림차순
sort(a) #default 는 오름차순
b<--10:-1
b
sort(a,decreasing=TRUE)+b #vector들 간의 사칙연산은 길이가 같아야 가능함
var1<-c(70,60,55,75,95,90,80,80,85,100)
sum(c)
var1<-c(70,60,55,75,95,90,80,80,85,100)
sum(var1)
mean(var1)
var1<-c(70,60,55,75,95,90,80,80,85,100)
sum(var1)
mean(var1)
sd(var1)
var2<-sort(var1, index, return=TRUE)
var2<-sort(var1, return=TRUE)
var2$ix[5]
var2<-sort(var1)
var2$ix[5]
var2<-sort(var1)
var2$ix[5]
var2<-sort(var1)
var2$ix[5]
a<-c(1:3,NA,NaN,NULL)
a
is.na(a) #NA, NaN 요소는 TRUE
is.nan(a) #NaN 요소는 TRUE
is.null(a)
a+3 #NA,NaN는 연산 불가능, NULL은 값이 없으므로 pass
var1
var1
names(var1)
var1
names(var1)
names(var1)<-1:10
var1
var1
names(var1)
names(var1)<-1:10
var1
names(var1)<-NULL
var1
a<-c(1:3,NA,NaN,NULL)
a
is.na(a) #NA, NaN 요소는 TRUE
is.nan(a) #NaN 요소는 TRUE
is.null(a)
a+3 #NA,NaN는 연산 불가능, NULL은 값이 없으므로 pass
b<-c(NA,2,3,NA,-1)
b
mean(b) # NA가 들어 있는 것의 통계값 NA
mean(b,na.rm=TRUE) #NA 제외하고 통계처리
mean(c(NaN, 2,3,NaN, -1)) # NaN가 들어 있는 것의 통계값 NaN
mean(c(NaN, 2,3,NaN, -1),na.rm=TRUE)
a<-c(1,2,3,4,5)
a+c(NA,2,3,NA,-1)
knitr::opts_chunk$set(echo = TRUE)
Sys.setlocale('LC_ALL','C')
my_list=c('덩덕','쿵덕')
str1=paste0(my_list)
str1
knitr::opts_chunk$set(echo = TRUE)
Sys.setlocale('LC_ALL','C')
knitr::opts_chunk$set(echo = TRUE)
Sys.setlocale('LC_ALL','C')
my_list=c('덩덕','쿵덕')
str1=paste0(my_list)
str1
Sys.setlocale("LC_ALL", "en_US.UTF-8")
options(encoding = 'UTF-8')
Sys.setenv(LANG = "en_US.UTF-8")
localeToCharset()
Sys.setlocale("LC_ALL", "en_US.UTF-8")
options(encoding = 'UTF-8')
Sys.setenv(LANG = "en_US.UTF-8")
localeToCharset()
my_list=c('덩덕','쿵덕')
str1=paste0(my_list)
str1
str2=paste0(rep(my_list,2))
str2
str2=paste0(rep('쿵덕',2))
str2
str2=paste0(rep('쿵덕',2))
str2
str2=paste0(rep(c('쿵덕'),2))
str2
str2=paste0(rep('쿵덕',2), collapse='')
str2
my_list=c('덩덕','쿵덕')
str1=paste0(my_list, collapse='')
str1
jajinmori=paste0(rep(c(str1,str2)),collapse='')
jajinmori=paste0(rep(c(str1,str2)),collapse='')
jajinmori=paste0(rep(c(str1,str2)),collapse='')
jajinmori=paste0(rep(c(str1,str2)),collapse='')
jajinmori
jajinmori=paste0(rep(c(str1,str2),2),collapse='')
jajinmori
a=c(1,2,3)
class(a)
a=seq(1.1,2.0,by=0.1)
a
class(a)
a=c("a","b","c")
class(a)
a=c(1,"b",3)
class(a)
a
a=c(1,2,3)
is.numeric(a) ; is.integer(a)
a=1:3
is.numeric(a) ; is.integer(a)
a=seq(1.1,2.0,by=0.1)
is.numeric(a) ; is.integer(a)
a=letters[1:3]
is.character(a) ; is.numeric(a)
a=c("1","2","3")
as.numeric(a)
a=1:3
as.character(a)
a=seq(1.1,2.0,by=0.1)
as.integer(a)
var1=1:3
as.numeric(var1)
as.logical(var1)
as.character(var1)
var1=0:2
as.numeric(var1)
as.logical(var1)
as.character(var1)
Sys.setlocale("LC_ALL", "en_US.UTF-8")
options(encoding = 'UTF-8')
Sys.setenv(LANG = "en_US.UTF-8")
localeToCharset()
my_list=c('덩덕','쿵덕')
str1=paste0(my_list, collapse='')
str1
str2=paste0(rep('쿵덕',2), collapse='')
str2
jajinmori=paste0(rep(c(str1,str2),2),collapse='')
jajinmori
a=c(1,2,3)
class(a)
a=seq(1.1,2.0,by=0.1)
a
class(a)
a=c("a","b","c")
class(a)
a=c(1,"b",3)
class(a)
a
a=c(1,2,3)
is.numeric(a) ; is.integer(a)
a=1:3
is.numeric(a) ; is.integer(a)
a=seq(1.1,2.0,by=0.1)
is.numeric(a) ; is.integer(a)
a=letters[1:3]
is.character(a) ; is.numeric(a)
a=c("1","2","3")
as.numeric(a)
a=1:3
as.character(a)
a=seq(1.1,2.0,by=0.1)
as.integer(a)
Sys.setlocale("LC_ALL", "en_US.UTF-8")
options(encoding = 'UTF-8')
Sys.setenv(LANG = "en_US.UTF-8")
localeToCharset()
my_list=c('덩덕','쿵덕')
str1=paste0(my_list, collapse='')
str1
str2=paste0(rep('쿵덕',2), collapse='')
str2
jajinmori=paste0(rep(c(str1,str2),2),collapse='')
jajinmori
a=c(1,2,3)
class(a)
a=seq(1.1,2.0,by=0.1)
a
class(a)
a=c("a","b","c")
class(a)
a=c(1,"b",3)
class(a)
a
a=c(1,2,3)
is.numeric(a) ; is.integer(a)
a=1:3
is.numeric(a) ; is.integer(a)
a=seq(1.1,2.0,by=0.1)
is.numeric(a) ; is.integer(a)
a=letters[1:3]
is.character(a) ; is.numeric(a)
a=c("1","2","3")
as.numeric(a)
a=1:3
as.character(a)
a=seq(1.1,2.0,by=0.1)
as.integer(a)
var1=0:2
as.numeric(var1)
as.logical(var1)
as.character(var1)
family_name<-c("chung","lee","kang","park","song")
class(family_name)
f_fn<-factor(family_name)
class(f_fn)
Sys.setlocale("LC_ALL", "en_US.UTF-8")
options(encoding = 'UTF-8')
Sys.setenv(LANG = "en_US.UTF-8")
localeToCharset()
my_list=c('덩덕','쿵덕')
str1=paste0(my_list, collapse='')
str1
str2=paste0(rep('쿵덕',2), collapse='')
str2
jajinmori=paste0(rep(c(str1,str2),2),collapse='')
jajinmori
a=c(1,2,3)
class(a)
a=seq(1.1,2.0,by=0.1)
a
class(a)
a=c("a","b","c")
class(a)
a=c(1,"b",3)
class(a)
a
a=c(1,2,3)
is.numeric(a) ; is.integer(a)
a=1:3
is.numeric(a) ; is.integer(a)
a=seq(1.1,2.0,by=0.1)
is.numeric(a) ; is.integer(a)
a=letters[1:3]
is.character(a) ; is.numeric(a)
a=c("1","2","3")
as.numeric(a)
a=1:3
as.character(a)
a=seq(1.1,2.0,by=0.1)
as.integer(a)
var1=0:2
as.numeric(var1)
as.logical(var1)
as.character(var1)
family_name<-c("chung","lee","kang","park","song")
class(family_name)
f_fn<-factor(family_name)
class(f_fn)
family_name
f_fn
f_fn<-factor(family_name)
f_fn ;
summary(f_fn)
family_name<-c("chung","lee","chung","kang","song","lee","park", "park","song")
family_name ;
summary(family_name)
incomes<-c(60,49,40,61,64,59,50,66,44)
tapply(incomes,family_name,mean)
is.factor(family_name)
is.factor(f_fn)
as.factor(family_name)
is.factor(family_name)
is.factor(f_fn)
as.factor(family_name)
is.factor(family_name)
is.factor(f_fn)
as.factor(family_name)
incomes<-c(60,49,40,61,64,59,50,66,44)
tapply(incomes,family_name,mean)
tapply(incomes,family_name,sd)
tapply(incomes,family_name,min)
tapply(incomes,family_name,var)
tapply(incomes,family_name,sum)
is.factor(family_name)
is.factor(f_fn)
as.factor(family_name)
var1=as.factor(c(1, 2, 3, 3, 4, NA, 3, 2, 4, 5, NA, 5))
var1
var1=as.factor(c(1, 2, 3, 3, 4, NA, 3, 2, 4, 5, NA, 5))
var1
level(var1)
var1=as.factor(c(1, 2, 3, 3, 4, NA, 3, 2, 4, 5, NA, 5))
var1
var1.level
var1=as.factor(c(1, 2, 3, 3, 4, NA, 3, 2, 4, 5, NA, 5))
var1
var1.level
var1=as.factor(c(1, 2, 3, 3, 4, NA, 3, 2, 4, 5, NA, 5))
var1
levels(var1)
var1=as.factor(c(1, 2, 3, 3, 4, NA, 3, 2, 4, 5, NA, 5))
var1
levels(var1) # Becomes string
var1=c("March","April","January","November","January", "September","October","September","November","August","February", "January","November","November","February","May","August","February", "July","December","August","August","September","November","September", "February","April")
levels(var1)
var1=as.factor(c("March","April","January","November","January", "September","October","September","November","August","February", "January","November","November","February","May","August","February", "July","December","August","August","September","November","September", "February","April"))
levels(var1)
f_type=factor(c("A","O","AB","A","A","O","AB","A","AB"),
levles=c("A","B","O","AB"))
f_type=factor(c("A","O","AB","A","A","O","AB","A","AB"),
levels=c("A","B","O","AB"))
f_type
table(f_type)
summary(f_type)
tapply(f_type,f_type,length)
tapply(rep(1,length(f_type)),f_type,sum)
var1=as.factor(c("March","April","January","November","January", "September","October","September","November","August","February", "January","November","November","February","May","August","February", "July","December","August","August","September","November","September", "February","April"))
summary(var1)
f_type=factor(c("A","O","AB","A","A","O","AB","A","AB"),
levels=c("A","B","O","AB")) # It's ossible to pass `levels` manually to `factor`
f_type
f_type=factor(c("A","O","AB","A","A","O","AB","A","AB"),
levels=c("A","B","O","AB")) # It's possible to pass `levels` manually to `factor`
f_type
table(f_type)
summary(f_type)
tapply(f_type,f_type,length) # `tapply` returns NA if no data are in it
tapply(rep(1,length(f_type)),f_type,sum)
f_type[1]<-"B"
f_type[1]<-"B"
f_type
f_type[1]<-"C"
f_type[1]<-"C" # This returns an error
f_type[1]<-"C" # This leads to an error
f_type[1]<-"C" # This leads to NA
f_type
f_type[1]<-"C" # This leads to NA
f_type
levels(f_type)[3]<-"OO"
f_type
f_type[1]<-"C" # This leads to NA
f_type
levels(f_type)[3]<-"OO" # Changing a level changes all value, because this is a `factor` object
f_type
f_type[1]<-"C" # This leads to NA
f_type
levels(f_type)[3]<-"OOK" # Changing a level affects all values, because this is a `factor` object
f_type
knitr::opts_chunk$set(echo = TRUE)
Sys.setlocale('LC_ALL','C')
matrix(1:15,nrow=3,ncol=5) #  열기준
matrix(seq(1,15),nrow=3,ncol=5,byrow=T) #행기준
matrix(seq(2,20,by=2),c(2,5)) #2x5 행렬
matrix(c(2,4,6,8,10,12,14,16,18,20),nrow=2) #2x5 행렬, 열개수=요소개수/행개수
m<-matrix(c(2,4,6,8,10,12,14,16,18,20),nrow=2)
m
dim(m) # 행, 열 개수
a<-c(2,4,6,8)
b<-c(10,12,14,16)
cbind(a,b)
rbind(a,b)
m1<-matrix(seq(1,9),3,3) ; m2<-matrix(seq(1,6),3,2)
#cbind(m1,m2) #행의 개수가 같으므로
#rbind(m1,m2) #는 error 열의 개수가 다르므로
rbind(m1,t(m2)) #t(m2)는 m2의 transpose로 2x3의 행렬을 만듬. m1와 t(m2)의 열의 개수가 3개로 동일해짐
a<-c(2,4,6,8)
class(a) ; is.matrix(a)
b<-as.matrix(a); b
class(b)
m<-matrix(seq(2,20,by=2),c(2,5))
m
m[1,3] #1행 3열의 값
m[2,] #2행 전체 vector
m[,3] #3열 전체 vector
m
m[-1,-3] #1행과 3열 전체를 빼고
m[-1,] #1행 전체를 빼고
m[,-2] # 2열 전체를 빼고
m<-matrix(seq(1:15),nrow=3,ncol=5,byrow=T, dimnames=list(c("id1","id2","id3"),c("A","B","C","D","E"))) #dimnames=list(행이름, 열이름)
m
rownames(m) # 행 이름
colnames(m) # 열 이름
rownames(m)<-c("ID1","ID2","ID3") # 행 이름 바꾸기 또는 넣기
colnames(m)<-letters[1:5] # 열 이름 바꾸기 또는 넣기
m
dimnames(m)
m["ID3",] #행 이름이 ID3
m[,"b"] #열 이름이 b
m["ID1",c("d","e")] #행 이름 Id1, 열 이름 d,e인 경우
#m[,-c("d","e")] #error
m[,!colnames(m)%in% c("d","e")]
subset(m,select=-c(d,e))
m1<-matrix(1:4, 2,2)
m2<-matrix(5:8, 2,2)
m1
m2
m1+m2
m1*m2  # 동일한 위치의 요소끼리의 곱셈
m1%*%m2 # 행렬 곱
m1; t(m1) #전치행렬
solve(t(m1)%*%m1) # (X'X)^(-1) 의 행렬
m1
colSums(m1) # 열별 sum
rowSums(m1) # 행별 sum
colMeans(m1) # 열별 mean
rowMeans(m1) # 행별 mean
apply(m1,2,sum) #colSums(m1)
apply(m1,1,sum) #rowSums(m1)
m=matrix(c(1:4, 1, 6:8), nrow = 2)
colMeans(m)
rowMeans(m)
m=matrix(c(1:4, 1, 6:8), nrow = 2)
apply(m,1,mean) # Column
apply(m,2,mean) # Row
colMeans(m)
rowMeans(m)
